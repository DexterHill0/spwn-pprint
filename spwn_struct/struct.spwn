type @struct
impl @struct {

	new: (values) {
		let curr_struct
		let cleaned = {}

		for v in values {
			if $.matches(v[1], @struct) {
				curr_struct = v[1]
			}
			else {
				cleaned[v[0]] = v[1]
			}
		}

		if curr_struct == null {
			throw "Missing struct in arguments!"
		}

		if cleaned.keys().length < curr_struct.keys().length {
			throw "Expected {} parameters, got {} when constructing `@struct`".fmt([curr_struct.keys().length, cleaned.keys().length])
		}

		let new = @struct::{}

		for k in cleaned.keys() {
			if $.matches(cleaned[k], curr_struct[k]) {
				new[k] = cleaned[k]
			}
			else {
				throw "Type `{}` does not match the type `{}` specified for struct field: `{}`".fmt([cleaned[k].type, curr_struct[k], k])
			}
		}

		return new
	},

	keys: (self) {
		let new = []
		for x in self {
			if x[0] != "type" {
				new.push(x[0])
			}
		}
		return new
	}
}

return {
	struct: @struct,
}